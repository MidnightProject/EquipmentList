<Control x:Name="Control" x:Class="EquipmentList.Controls.FilterWithPopupControl"
         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
         xmlns:dgx="clr-namespace:DataGridExtensions;assembly=DataGridExtensions">
    <Control.Template>
        <ControlTemplate>
            <Grid Margin="10,0,0,0">
                <WrapPanel Orientation="Horizontal">
                    <ToggleButton x:Name="button" IsChecked="{Binding Path=IsPopupVisible, ElementName=Control, Mode=TwoWay}" Height="20" Background="White">
                        <ToggleButton.Style>
                            <Style TargetType="Control">
                                <!-- Only show the button if the filter is active or if the mouse is over the column header -->
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Filter, ElementName=Control}" Value="{x:Null}">
                                        <Setter Property="Visibility" Value="Hidden" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}" Value="True">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                        <!-- Reuse the standard icon, but change color to green -->
                        <Control Style="{DynamicResource {x:Static dgx:DataGridFilter.IconStyleKey}}"/>
                    </ToggleButton>
                    <Button Height="20" Width="16" FontSize="16" Background="White" BorderBrush="Transparent" Foreground="LightGray" Click="Button_Click">
                        <Button.Style>
                            <Style TargetType="Control">
                                <!-- Only show the button if the filter is active or if the mouse is over the column header -->
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Filter, ElementName=Control}" Value="{x:Null}">
                                        <Setter Property="Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}" Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="Button">
                                            <Border>
                                                <Border.Style>
                                                    <Style TargetType="{x:Type Border}">
                                                        <Style.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Background" Value="White"/>
                                                            </Trigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Border.Style>
                                                <Grid Background="White">
                                                    <ContentPresenter></ContentPresenter>
                                                </Grid>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Button.Style>
                        <TextBlock Text="x" Margin="0,-4,0,0" HorizontalAlignment="Center" FontWeight="DemiBold">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Foreground" Value="Gray"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </Button>
                </WrapPanel>
                <Popup x:Name="popup" IsOpen="{Binding Path=IsPopupVisible, ElementName=Control, Mode=TwoWay}"
               AllowsTransparency="True"
               DataContext="{Binding ElementName=Control}" StaysOpen="False">
                    <Border Background="White" BorderBrush="Gray" BorderThickness="1" CornerRadius="3" Padding="4">
                        <StackPanel>
                            <TextBlock x:Name="Caption" Text="{Binding Path=Caption, ElementName=Control, TargetNullValue='Enter the limits:'}" Margin="0,3" />
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="5" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="5"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>

                                <TextBlock Text="From:" Grid.Column="0" Grid.Row="0" VerticalAlignment="Center"/>
                                <DatePicker Grid.Column="2" Grid.Row="0" SelectedDate="{Binding Path=Minimum}"/>
                                <TextBlock Text="To:" Grid.Column="0" Grid.Row="2" VerticalAlignment="Center"/>
                                <DatePicker Grid.Column="2" Grid.Row="2" SelectedDate="{Binding Path=Maximum}"/>

                            </Grid>
                        </StackPanel>
                    </Border>
                </Popup>
            </Grid>
        </ControlTemplate>
    </Control.Template>
    </Control>
